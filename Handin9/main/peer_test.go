package main

import (
	"fmt"
	"net"
	"testing"
	"time"
)

func TestShouldReadMarshalledValuesCorrectlyFromConn(t *testing.T) { //pass
	peer1, _, listener, listener2 := connectTwoPeers(t)
	defer listener.Close()
	defer listener2.Close()
	time.Sleep(1 * time.Second)
	realConn := peer1.connectionsURI
	fmt.Println("Testing on this array:", realConn, "with length: ", len(realConn))
	marshalledConn := peer1.MarshalConnectionsURI(realConn)
	fmt.Println("Marshalled ConnectionsURI: ", marshalledConn)
	demarshalledConn := peer1.DemarshalConnectionsURI(marshalledConn)
	fmt.Println("Demarshalled ConnectionsURI: ", demarshalledConn)
	marshalledCorrectly := testEq(demarshalledConn, realConn)
	if !marshalledCorrectly {
		t.Error("Expected,", realConn, "Got", demarshalledConn)
	} else {
		fmt.Println("TestShouldReadMarshalledValuesCorrectlyFromConn passed")
	}
}

func TestShouldMarshalConnectionsCorrectly(t *testing.T) { //pass
	/*peer1, _ := connectTwoPeers(t)
	realConn := peer1.GetConnections()*/
	peer1 := peerFixture()
	realConn := []string{"yo", "yo"}
	fmt.Println("Realconn:", realConn, "End")
	marshalledConn := peer1.MarshalConnectionsURI(realConn)
	demarshalledConn := peer1.DemarshalConnectionsURI(marshalledConn)
	marshallingCorrect := testEq(realConn, demarshalledConn)
	fmt.Println(realConn)
	time.Sleep(1 * time.Second)
	if !marshallingCorrect {
		t.Errorf("Arrays should be equal")
	} else {
		fmt.Println("Peer test TestShouldMarshalConnectionsCorrectly passed")
	}
}

func TestShouldSendVerifiedTransactionCorrectlyToAnotherPeer(t *testing.T) {
	peer1, listener1 := createPeer("fa", "fa")
	defer listener1.Close()

	peer2, listener := createPeer(peer1.ip, peer1.port)
	defer listener.Close()
	newRsa := MakeRSA(2000)
	publicKey := (newRsa.n).String()
	secretKey := (newRsa.d).String()

	peer3, listener3 := createPeerWithTransaction(peer1.ip, peer1.port, publicKey, "bob", 200, secretKey)
	defer listener3.Close()
	time.Sleep(2 * time.Second)
	if !(peer3.ledger.Accounts[publicKey] == -200) {
		fmt.Println("ledger3 account not right, has value", peer1.ledger.Accounts[publicKey])
	} else if !(peer2.ledger.Accounts[publicKey] == -200) {
		fmt.Println("ledger2 account not right")
	} else if !(peer1.ledger.Accounts[publicKey] == -200) {
		fmt.Println("ledger1 account not right")
	} else {
		fmt.Println("Test passed, the tranasction was succesfully sent and verified at all peers")
	}

}

func TestShouldNotSendUnVerifiedTransactionCorrectlyToAnotherPeer(t *testing.T) {
	peer1, listener1 := createPeer("fa", "fa")
	defer listener1.Close()

	peer2, listener := createPeer(peer1.ip, peer1.port)
	defer listener.Close()
	newRsa := MakeRSA(2000)
	publicKey := (newRsa.n).String()
	secretKey := "wrong"

	peer3, listener3 := createPeerWithTransaction(peer1.ip, peer1.port, publicKey, "bob", 200, secretKey)
	defer listener3.Close()
	time.Sleep(2 * time.Second)
	if !(peer3.ledger.Accounts[publicKey] == 0) {
		fmt.Println("ledger3 account not right, has value", peer1.ledger.Accounts[publicKey])
	} else if !(peer2.ledger.Accounts[publicKey] == 0) {
		fmt.Println("ledger2 account not right")
	} else if !(peer1.ledger.Accounts[publicKey] == 0) {
		fmt.Println("ledger1 account not right")
	} else {
		fmt.Println("Test passed, the tranasction was not sent and thus was not verified")
	}

}

func TestShouldMarshalTransactionCorrectly(t *testing.T) { //works sometimes, god knows why...
	peer1 := peerFixture()

	transaction := MakeSignedTransaction("400", "Rasmus", 100, "300")
	fmt.Println("Marshalling this transaction: ", *transaction)
	marshalled := peer1.MarshalTransaction(*transaction)
	fmt.Println("This is marshalled:", marshalled)
	demarshalled, _ := peer1.DemarshalTransaction(marshalled)
	fmt.Println("Getting this demarshalled thing back:", demarshalled)
	if demarshalled.Amount != transaction.Amount {
		fmt.Println("Amounts not equal")
	} else if demarshalled.ID != transaction.ID {
		fmt.Println("Id not equal")
	} else if demarshalled.From != transaction.From {
		fmt.Println("From not equal")
	} else if demarshalled.To != transaction.To {
		fmt.Println("To not equal")
	} else if demarshalled.Signature != transaction.Signature {
		fmt.Println("Signatures not equal, got: ", demarshalled.Signature, ", expected: ", transaction.Signature)
	} else if demarshalled.Amount != 100 {
		t.Error("Field amount not demarshalled properly")
	} else {
		fmt.Println("Marshalling test passed")
	}
}
func TestConnurishouldhavelen10after10peers(t *testing.T) { //pass
	peer1, listener1 := createPeer("fa", "fa")
	defer listener1.Close()

	for i := 0; i < 9; i++ {
		_, listener := createPeer(peer1.ip, peer1.port)
		defer listener.Close()
	}

	time.Sleep(2 * time.Second)
	conns := peer1.connectionsURI

	if len(conns) == 10 {
		fmt.Println("Test passed with conns:", conns)
	} else {
		t.Error("Not all peers are added to conn uri, list has length:", len(conns))
	}
}

func TestConnuriANDConnsshouldhavelen10and9after10peers(t *testing.T) { //pass
	peer1, listener1 := createPeer("fa", "fa")
	defer listener1.Close()

	for i := 0; i < 9; i++ {
		_, listener := createPeer(peer1.ip, peer1.port)
		defer listener.Close()
	}

	time.Sleep(2 * time.Second)
	conns := peer1.connectionsURI
	conns2 := peer1.connections

	if len(conns) == 10 && len(conns2) == 9 {
		fmt.Println("Test passed, both have at least length 10")
	} else {
		t.Error("Not all peers are added to either conn uri or conn, lists have length:", len(conns), "and ", len(conns2))
	}
}

func TestShouldOnlyConnectTo10lastConnURI(t *testing.T) { //fails
	peer1, listener1 := createPeer("fa", "fa")
	defer listener1.Close()

	for i := 0; i < 12; i++ {
		_, listener := createPeer(peer1.ip, peer1.port)
		defer listener.Close()
	}
	peer2, listener2 := createPeer(peer1.ip, peer1.port)
	defer listener2.Close()

	time.Sleep(2 * time.Second)
	conns := peer2.connectionsURI
	conns2 := peer2.connections
	//Conns2 should be 22, 12 peers connected to it, it connected to 10 peers.
	if len(conns) == 14 && len(conns2) >= 10 && len(conns2) <= 11 {
		fmt.Println("Test passed, both have at least length 10")
	} else {
		t.Error("Not all peers are added to either conn uri or conn, lists have length:", len(conns), "and ", len(conns2))
	}
}

func peerFixture() *Peer {
	transaction := MakeSignedTransaction("acc1", "acc2", 100, "yeet")

	fixedUriStrategy := MakeFixedUriStrategy("123", "123")
	fixedInputStrategy := MakeFixedInputStrategy(*transaction)
	fixedOutboundIPStrategy := MakeFixedOutboundIPStrategy("localhost")
	messageSendingStrategy := MakeStubbedMessageSendingStrategy()

	peer := MakePeer(fixedUriStrategy, fixedInputStrategy, fixedOutboundIPStrategy, messageSendingStrategy)
	return peer
}

func connectTwoPeers(t *testing.T) (*Peer, *Peer, net.Listener, net.Listener) {
	transaction := MakeSignedTransaction("acc1", "acc2", 100, "yeet")
	fixedUriStrategy1 := MakeFixedUriStrategy("123", "123")
	fixedInputStrategy := MakeFixedInputStrategy(*transaction)
	realOutboundIPStrategy := new(RealOutboundIPStrategy)
	messageSendingStrategy := MakeStubbedMessageSendingStrategy()
	peer1 := MakePeer(fixedUriStrategy1, fixedInputStrategy, realOutboundIPStrategy, messageSendingStrategy)

	peer1.JoinNetwork(peer1.GetURI())
	listener := peer1.StartListeningForConnections()
	//defer listener.Close()
	go peer1.TakeNewConnection(listener)

	fixedUriStrategy2 := MakeFixedUriStrategy(peer1.ip, peer1.port)
	peer2 := MakePeer(fixedUriStrategy2, fixedInputStrategy, realOutboundIPStrategy, messageSendingStrategy)

	peer2.JoinNetwork(peer2.GetURI())
	listener2 := peer2.StartListeningForConnections()
	defer listener2.Close()
	go peer2.TakeNewConnection(listener)

	uri1 := peer1.GetURI()
	peer1.AddSelfToConnectionsURI()
	peer1.BroadcastPresence(uri1)

	uri2 := peer2.GetURI()
	peer2.AddSelfToConnectionsURI()
	peer2.BroadcastPresence(uri2)

	return peer1, peer2, listener, listener2

}

func connectNewPeer(peer *Peer, t *testing.T) {
	transaction := MakeSignedTransaction("acc1", "acc2", 100, "yeet")
	fixedUriStrategy1 := MakeFixedUriStrategy(peer.ip, peer.port)
	fixedInputStrategy := MakeFixedInputStrategy(*transaction)
	realOutboundIPStrategy := new(RealOutboundIPStrategy)
	messageSendingStrategy := MakeStubbedMessageSendingStrategy()
	newPeer := MakePeer(fixedUriStrategy1, fixedInputStrategy, realOutboundIPStrategy, messageSendingStrategy)
	newPeer.JoinNetwork(newPeer.GetURI())
	listener := newPeer.StartListeningForConnections()
	defer listener.Close()
	go newPeer.TakeNewConnection(listener)

	uri := newPeer.GetURI()
	newPeer.AddSelfToConnectionsURI()
	newPeer.BroadcastPresence(uri)
	for {
		go newPeer.TakeNewConnection(listener)
	}

}

func testEq(a, b []string) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

func createPeer(ip string, port string) (*Peer, net.Listener) {
	transaction := MakeSignedTransaction("acc1", "acc2", 100, "yeet")

	fixedUriStrategy := MakeFixedUriStrategy(ip, port)
	fixedInputStrategy := MakeFixedInputStrategy(*transaction)
	fixedOutboundIPStrategy := MakeFixedOutboundIPStrategy("localhost")
	messageSendingStrategy := MakeStubbedMessageSendingStrategy()
	peer := MakePeer(fixedUriStrategy, fixedInputStrategy, fixedOutboundIPStrategy, messageSendingStrategy)

	uri := peer.GetURI()

	peer.JoinNetwork(uri)

	listener := peer.StartListeningForConnections()

	peer.AddSelfToConnectionsURI()

	ownURI := peer.ip + ":" + peer.port
	peer.BroadcastPresence(ownURI)

	//go peer.HandleIncomingFromUser()

	go peer.SendMessages()
	go takeNewConnectionsHelp(peer, listener)

	return peer, listener
}

func createPeerWithTransaction(ip string, port string, from string, to string, amount int, secret string) (*Peer, net.Listener) {
	transaction := MakeSignedTransaction(from, to, amount, secret)

	fixedUriStrategy := MakeFixedUriStrategy(ip, port)
	fixedInputStrategy := MakeFixedInputStrategy(*transaction)
	fixedOutboundIPStrategy := MakeFixedOutboundIPStrategy("localhost")
	messageSendingStrategy := new(RealMessageSendingStrategy)
	peer := MakePeer(fixedUriStrategy, fixedInputStrategy, fixedOutboundIPStrategy, messageSendingStrategy)

	peer.slotLength = 1           //Set slotlength
	peer.connectionThreshold = 10 //Set threshold to begin network
	uri := peer.GetURI()

	peer.JoinNetwork(uri)

	listener := peer.StartListeningForConnections()

	peer.AddSelfToConnectionsURI()

	ownURI := peer.ip + ":" + peer.port
	peer.BroadcastPresence(ownURI)

	//go peer.HandleIncomingFromUser()
	go send1message(peer)
	go peer.SendMessages()
	go takeNewConnectionsHelp(peer, listener)

	return peer, listener
}

func takeNewConnectionsHelp(peer *Peer, listener net.Listener) {
	for {
		peer.TakeNewConnection(listener)
	}
}

func send1message(peer *Peer) {
	msg := peer.userInputStrategy.HandleIncomingFromUser()
	peer.outbound <- msg
}

//NEWTEST
func TestTreeGrowsWithOneRound(t *testing.T) { //This test relies on low hardness set in the peer (set the mul operator to 2)
	peer1, listener1 := createGenPeerX("fa", "fa", 1, 4)
	defer listener1.Close()

	for i := 2; i < 11; i++ {
		_, listener := createGenPeerX(peer1.ip, peer1.port, i, 4)
		defer listener.Close()
	}
	time.Sleep(6 * time.Second)
	if peer1.blockTree.GetTreeSize() >= 5 {
		fmt.Println("PASS: Peer1 blocktree size:", peer1.blockTree.GetTreeSize())
	} else {
		fmt.Println("FAIL: Peer1's tree did not append atleast 5 winners..")
	}

}

//NEWTEST
func TestTreeGrowsWithSeveralRounds(t *testing.T) { //This test relies on low hardness set in the peer (set the mul operator to 2)
	peer1, listener1 := createGenPeerX("fa", "fa", 1, 1)
	defer listener1.Close()

	for i := 2; i < 11; i++ {
		_, listener := createGenPeerX(peer1.ip, peer1.port, i, 1)
		defer listener.Close()
	}
	time.Sleep(6 * time.Second)
	if peer1.blockTree.GetTreeSize() >= 5 {
		fmt.Println("PASS: Peer1 blocktree size:", peer1.blockTree.GetTreeSize())
		fmt.Println("This is Peer1's tree:")
		peer1.blockTree.PrintTree()
	} else {
		fmt.Println("FAIL: Peer1's tree did not append atleast 5 winners..")
	}

}

//NEWTEST
func TestLedgerGetsUpdatedWithValidTransAcc(t *testing.T) { //This test relies on low hardness set in the peer (set the mul operator to 2)
	peer1, listener1 := createGenPeerX("fa", "fa", 1, 1)
	defer listener1.Close()

	for i := 2; i < 10; i++ {
		_, listener := createGenPeerX(peer1.ip, peer1.port, i, 1)
		defer listener.Close()
	}
	publicKey := "84128649689229141748476650346323678486437898780555562239274803331023504201661721263725702164844226716062121140282102659840393631295501503873123285321391312474481459683725818683741140427611468317891812252761172109050348451968978555634590357968074943405603291955327118302707346701747767186913466136936866428063285478486512344926095099958608452772818854082739431085262847212088429662485943109069166647077422997592232691907767336984413736921170670999915528283134193422301868063392769631810144899315337178298078695275092232062924257321021504333397583129567164544715249346168224769592996908555919759005032463"
	secretKey := "56085766459486094498984433564215785657625265853703708159516535554015669467774480842483801443229484477374747426854735106560262420863667669248748856880927541649654306455817212455827426951740978878594541501840781406033565634645985703756393571978716628937068861303551412201804897801165178124608977424624565383660090020108279414641760356014618805194026664668950447058660780645842250453168342552799489026854312248658849391273762450578714474116884341495389211345085680851007877682232233392631306652138191781996971108044388337365555941608247827596381515834264967330548744937537617112889038432355010227570468939"

	peer3, listener3 := createPeerWithTransaction(peer1.ip, peer1.port, publicKey, "bob", 25000, secretKey)
	defer listener3.Close()
	time.Sleep(6 * time.Second)
	if peer1.ledger.Accounts[publicKey] <= 975000 && peer3.ledger.Accounts[publicKey] <= 975000 {
		fmt.Println("PASS: The transaction to Bob Went through!")
		fmt.Println("This is Peer1's ledger:")
		peer1.ledger.Print()
	} else {
		fmt.Println("FAIL: The transaction to Bob did not go through..")
	}

}

func createGenPeerX(ip string, port string, number int, slotLength float64) (*Peer, net.Listener) {
	transaction := MakeSignedTransaction("acc1", "acc2", 100, "yeet")

	fixedUriStrategy := MakeFixedUriStrategy(ip, port)
	fixedInputStrategy := MakeFixedInputStrategy(*transaction)
	fixedOutboundIPStrategy := MakeFixedOutboundIPStrategy("localhost")
	messageSendingStrategy := MakeStubbedMessageSendingStrategy()
	peer := MakePeer(fixedUriStrategy, fixedInputStrategy, fixedOutboundIPStrategy, messageSendingStrategy)
	peer.rsa = makeGenesisRSAX(number)
	peer.slotLength = slotLength  //Set slotlength
	peer.connectionThreshold = 10 //Set threshold to begin network
	uri := peer.GetURI()

	peer.JoinNetwork(uri)

	listener := peer.StartListeningForConnections()

	peer.AddSelfToConnectionsURI()

	ownURI := peer.ip + ":" + peer.port
	peer.BroadcastPresence(ownURI)

	//go peer.HandleIncomingFromUser()

	go peer.SendMessages()
	go takeNewConnectionsHelp(peer, listener)

	return peer, listener
}

func makeGenesisRSAX(trimmedDecision int) *RSA {
	if trimmedDecision == 1 {
		return MakeRSAWithKeys("99220599159528886888088184316939863466036751390102525224276426598372453374970490581931623644823947730183615834970415935110413997957190268925746447986875045619423695530354351164666747197504575160571344765059782114834542464872778036174724267595394424527864340941278010670086469948102379662561982997267164040169642087775263921101619527508747168787150255148601076426931391934490878646150913881272213119308249212668240473054293497445413288931672488505288383846988700744069430536032867719784270610575963716882208428391419536387867514792667272504971046836440153259514944143565853403498339935380048998940846417", "66147066106352591258725456211293242310691167593401683482850951065581635583313660387954415763215965153455743889980277290073609331971460179283830965324583363746282463686902900776444498131669716773714229843373188076556361643248518690783149511730262949685242893960852007113390979965401586441707988664844762745508117637359502895110544591891447889581986360912541538288351271783269725834355782179249158683359773911535600994935883950084494585598131890180600348693060660169070167869890819212774506630114016303382665745688834796844837019895605694433162313497206230710528213636589702842149997136746634853051713867")

	} else if trimmedDecision == 2 {
		return MakeRSAWithKeys("85599412879953205917443492336639751512406088883204488437353959378513522416955024172185792293853309086614045424001070998033302348930881810677829310464668788989108423815275401435146750989817827599726082819178311301126706125959538642880756008147465621540684475755420770483545469382177500313066980466028571318051567830522706186098394127053090432052404629932589506015468201259035009870260298981986568167423584202889539017410056236371005761663036714192956723654474436989600592958683850034049398561016771652916907371747535483041614739176853531168948855088182175940234786700494940589098849136266341141384155161", "57066275253302137278295661557759834341604059255469658958235972919009014944636682781457194862568872724409363616000713998688868232620587873785219540309779192659405615876850267623431167326545218399817388546118874200751137417306359095253837338764977081027122983836947180322363646254785000208711320310685701811559846153402328139644121775388847982512106893024434013483758676091513272361707236043468694775351691990371111047305227069747581372080012677826929336064868485779336318206441324807451529044360430322327105045986377923610860674048722625908251886363769200610782611957129406730807694517303759791724147883")

	} else if trimmedDecision == 3 {
		return MakeRSAWithKeys("94938669199553053778857680890888139261052515031742833094394381264005413538787479617048724551658947047884930786878545592643341156546341629355279941159238226952308048437799632118321605345240931468890113418679236203299986663053672098258710173978852424933276878715147922334893146561517950444275025644591250775616495714369301297920912844517777635723745293144772908702674201382610931091114936463191905169309350953666108512426366528125453362350408077328372072616595844746964708723653945189478227150662157838762184542167781442195750766257212784191074842194010540524247230081017641149812905846481771040387362473", "63292446133035369185905120593925426174035010021161888729596254176003609025858319744699149701105964698589953857919030395095560771030894419570186627439492151301538698958533088078881070230160620979260075612452824135533324442035781398839140115985901616622184585810098614889928764374345300296183350429727487513247907826811332243853037976223252383517850387930734758706368641950566574540183286993467902730480342892768574995901365843993484181587657388877051442097120415616997954645795326298701270004588959437930315518222758790083847871266845126016838669344583388972271861405121067179022340927614093613385620747")

	} else if trimmedDecision == 4 {
		return MakeRSAWithKeys("86452583383266791348634781602421438878698534614119180980968848675882051691784360216437184392986096403545804536088141253936277211321077867008928351117078687752098828115507303231608265820845626805071434231628014647390168434917827717171761542393062938452743852651638618758631815804918108293956355994913095700264201221183679675084999195848794748227364469628612623985152910407381138458527275020855508562816993941567564049116010190501316109460348488259049824369447635049113942952733472839266362177569036225918382937248188277295907694169924415652794045804910426213945443411813621594154348105518818184294346249", "57635055588844527565756521068280959252465689742746120653979232450588034461189573477624789595324064269030536357392094169290851474214051911339285567411385791834732552077004868821072177213897084536714289487752009764926778956611885144781174361595375292301829235101092412505754543869945405529304237329942051377748136662340932984463101236766809521029118372315113914738854726914491432436095678435744369554205214824941855772892744662093065231091360991479412976539166537893744224448305815567518191356700827230606962081724820505633499922128887121521862665873647845984096294415483390872767806744329110111292872707")

	} else if trimmedDecision == 5 {
		return MakeRSAWithKeys("81594135348859355889822650216374879117537833325687870348641933990660498172029614843858960160893543004971705050678775284039487254233047107626982118266040228151804438920763314751390066459108316561422333596643117831355245977759296418702636935930016592216482955679278425203161695636496952978681695659108476606655855138949339170964644615516779164639460908768229783291708712591905418163269629394026883090207088407617292418141057959266029941628814934364965311043536457231536747940040915132263532817583457081113622394066389240032727746638150825261278748778368829057825231315703499329107889498851283808455800053", "54396090232572903926548433477583252745025222217125246899094622660440332114686409895905973440595695336647803367119183522692991502822031405084654745510693485434536292613842209834260044306072211040948222397762078554236830651839530945801757957286677728144321970452852283468774463757664635319121130439405638970909854179038382504969020111450170410451417348364551804794839643872324455490156426963773821964652385519393075073646193260017039391994317289516698863165631189739683305288120447200424391498376646686085100647822777706297051468474204958854675868534108069068727135675736578916481170092283193250304079147")

	} else if trimmedDecision == 6 {
		return MakeRSAWithKeys("68712351107036437585558705394329932588021453857860002869669357991132586124756852552170712566827012427858101219618342474924223484377006108583647716433567632020410463771552291860494123411766514967952437791952149536595761761768628201669701017186368206738007739214514369690280938959709348367114444332007867429293050870824281366539775693622799966913656661963258346342063688423549783151910273001303698713413753940866803337598653489349374695693083666618952340366801511166307844828148472432093460461261574440793050106855026669923821302882500596809281593084599607212884045166225929286154650189492119251332062599", "45808234071357625057039136929553288392014302571906668579779571994088390749837901701447141711218008285238734146412228316616148989584670739055765144289045088013606975847701527906996082274511009978634958527968099691063841174512418801113134011457578804492005159476342913126853959306472898911409629554671900562891662517910310816976048692788121342291618014156450442211850894825573035111466101918246333531693242849867852990861822107357625185920032273742245112863764196731704101713955660553343809048635685453501018233883060616462317688347186989653622928858407676200919168956518687164103793355239275219789957227")

	} else if trimmedDecision == 7 {
		return MakeRSAWithKeys("91273955433896845510861081477211261393472951931840460054284580008859771006155212340140914787944390979120878930868609996748058338377907640267677073912279817976565958447357541072604121964619900931316478594350118528701705448279141426514958466636086268075062290138629777662471099352388822521900394668942098551444827506570358387824412636648945544583564346168203783434336720700601682369105551602717253212251522431865494980399642085639650473281351181921205615546964230228380781298938116442898519184131549614047592945564571080985964305710217520577386421357275728766359526997545444234524045366917234420371495547", "60849303622597897007240720984807507595648634621226973369523053339239847337436808226760609858629593986080585953912406664498705558918605093511784715941519878651043972298238360715069414643079933954210985729566745685801136965519427617676638977757390845383374860092419851774980732901592548347933596445961386267208512158936772511903756932088854615177782343747050024542617812991958723910140318864835765370320427471027760923989513917970228497157097274228721872030968193465764382197457306647061271751006469270808021101220186242685745944137832107706962543049504351247550396764180885509402107674673111483343461787")

	} else if trimmedDecision == 8 {
		return MakeRSAWithKeys("93794657355404229319431128515003855336007553691660833870546161779998773890778963918610615793046674621435648393754855465140820703534244156001995273674589296398055231116947487910019524886278710170329803131021053795853655945796124400948014542456370545523186541835638621833119654376852910734839180322005666717956119166548684174165313913116800090123914818313442355435582269314510251304868551601140242896427931023264834388541950156747332715777556673901039316230552233797602769052653802383292709024448454683898134884115648887478942523963719887462236797537388653795357302782037638846557126523009545287101796433", "62529771570269486212954085676669236890671702461107222580364107853332515927185975945740410528697783080957098929169903643427213802356162770667996849116392864265370154077964991940013016590852473446886535420680702530569103963864082933965343028304247030348791027890425747888746436251235273823226120214670431563924686410594852264011717447911867965421792457711609768721398045113825769696270387407334328842613191390579920555424156978849748835588041653519311851435698539337440204744765491196153239257941728858976517501464047535513082183750917382887638010506211749109922606527099218176875462650114570015548353827")

	} else if trimmedDecision == 9 {
		return MakeRSAWithKeys("84128649689229141748476650346323678486437898780555562239274803331023504201661721263725702164844226716062121140282102659840393631295501503873123285321391312474481459683725818683741140427611468317891812252761172109050348451968978555634590357968074943405603291955327118302707346701747767186913466136936866428063285478486512344926095099958608452772818854082739431085262847212088429662485943109069166647077422997592232691907767336984413736921170670999915528283134193422301868063392769631810144899315337178298078695275092232062924257321021504333397583129567164544715249346168224769592996908555919759005032463", "56085766459486094498984433564215785657625265853703708159516535554015669467774480842483801443229484477374747426854735106560262420863667669248748856880927541649654306455817212455827426951740978878594541501840781406033565634645985703756393571978716628937068861303551412201804897801165178124608977424624565383660090020108279414641760356014618805194026664668950447058660780645842250453168342552799489026854312248658849391273762450578714474116884341495389211345085680851007877682232233392631306652138191781996971108044388337365555941608247827596381515834264967330548744937537617112889038432355010227570468939")

	} else if trimmedDecision == 10 {
		return MakeRSAWithKeys("70621195703417734770343058091658851655361561261137761610884679258670223399663358264109783765671832663936755207486891476183124001771723250631352914064206920117635941024601491293081835825560660689267333988928709259887345879848794348613877724159584075736686419675997111138048781709667966034965470003107432057065409218721592297689386038371608402840880519345471603774550343846256833649393555592852268617261622997674448275202937119980781626022142094513891745877971273140692436832862996188468524311487549280326916150648541763048073345791515098905458134163062720372875194208748523538910421681658158526277952333", "47080797135611823180228705394439234436907707507425174407256452839113482266442238842739855843781221775957836804991260984122082667847815500420901942709471280078423960683067660862054557217040440459511555992619139506591563919899196232409251816106389383824457613117331407425365854473111977356643646668738276832537633132845787805744042592646044493003311754064041832749213975665596294833811787512683785544903252943781383044290811821447018358747441605357665865259282762476668907306423923701622064148912823436616682105409323617355598360462566986128445001798326379207490257344784110525958297045948387829570574059")
	} else {
		return MakeRSAWithKeys("70621195703417734770343058091658851655361561261137761610884679258670223399663358264109783765671832663936755207486891476183124001771723250631352914064206920117635941024601491293081835825560660689267333988928709259887345879848794348613877724159584075736686419675997111138048781709667966034965470003107432057065409218721592297689386038371608402840880519345471603774550343846256833649393555592852268617261622997674448275202937119980781626022142094513891745877971273140692436832862996188468524311487549280326916150648541763048073345791515098905458134163062720372875194208748523538910421681658158526277952333", "47080797135611823180228705394439234436907707507425174407256452839113482266442238842739855843781221775957836804991260984122082667847815500420901942709471280078423960683067660862054557217040440459511555992619139506591563919899196232409251816106389383824457613117331407425365854473111977356643646668738276832537633132845787805744042592646044493003311754064041832749213975665596294833811787512683785544903252943781383044290811821447018358747441605357665865259282762476668907306423923701622064148912823436616682105409323617355598360462566986128445001798326379207490257344784110525958297045948387829570574059")

	}
}
